// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	SvcRequest
	SvcResponse
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SvcRequest struct {
}

func (m *SvcRequest) Reset()                    { *m = SvcRequest{} }
func (m *SvcRequest) String() string            { return proto.CompactTextString(m) }
func (*SvcRequest) ProtoMessage()               {}
func (*SvcRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SvcResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *SvcResponse) Reset()                    { *m = SvcResponse{} }
func (m *SvcResponse) String() string            { return proto.CompactTextString(m) }
func (*SvcResponse) ProtoMessage()               {}
func (*SvcResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SvcResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SvcRequest)(nil), "helloworld.SvcRequest")
	proto.RegisterType((*SvcResponse)(nil), "helloworld.SvcResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Hello service

type HelloClient interface {
	Greeting(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*SvcResponse, error)
	StreamGreeting(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (Hello_StreamGreetingClient, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Greeting(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*SvcResponse, error) {
	out := new(SvcResponse)
	err := grpc.Invoke(ctx, "/helloworld.Hello/Greeting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *helloClient) StreamGreeting(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (Hello_StreamGreetingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hello_serviceDesc.Streams[0], c.cc, "/helloworld.Hello/StreamGreeting", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamGreetingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hello_StreamGreetingClient interface {
	Recv() (*SvcResponse, error)
	grpc.ClientStream
}

type helloStreamGreetingClient struct {
	grpc.ClientStream
}

func (x *helloStreamGreetingClient) Recv() (*SvcResponse, error) {
	m := new(SvcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hello service

type HelloServer interface {
	Greeting(context.Context, *SvcRequest) (*SvcResponse, error)
	StreamGreeting(*SvcRequest, Hello_StreamGreetingServer) error
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Greeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Hello/Greeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Greeting(ctx, req.(*SvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hello_StreamGreeting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SvcRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloServer).StreamGreeting(m, &helloStreamGreetingServer{stream})
}

type Hello_StreamGreetingServer interface {
	Send(*SvcResponse) error
	grpc.ServerStream
}

type helloStreamGreetingServer struct {
	grpc.ServerStream
}

func (x *helloStreamGreetingServer) Send(m *SvcResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _Hello_Greeting_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGreeting",
			Handler:       _Hello_StreamGreeting_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}

// Client API for World service

type WorldClient interface {
	Greeting(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*SvcResponse, error)
}

type worldClient struct {
	cc *grpc.ClientConn
}

func NewWorldClient(cc *grpc.ClientConn) WorldClient {
	return &worldClient{cc}
}

func (c *worldClient) Greeting(ctx context.Context, in *SvcRequest, opts ...grpc.CallOption) (*SvcResponse, error) {
	out := new(SvcResponse)
	err := grpc.Invoke(ctx, "/helloworld.World/Greeting", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for World service

type WorldServer interface {
	Greeting(context.Context, *SvcRequest) (*SvcResponse, error)
}

func RegisterWorldServer(s *grpc.Server, srv WorldServer) {
	s.RegisterService(&_World_serviceDesc, srv)
}

func _World_Greeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldServer).Greeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.World/Greeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldServer).Greeting(ctx, req.(*SvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _World_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.World",
	HandlerType: (*WorldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greeting",
			Handler:    _World_Greeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 156 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x48, 0xcd, 0xc9,
	0xc9, 0x2f, 0xcf, 0x2f, 0xca, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x28, 0xf1, 0x70, 0x71, 0x05, 0x97, 0x25, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0xa9,
	0x73, 0x71, 0x83, 0x79, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9,
	0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x51, 0x2f,
	0x23, 0x17, 0xab, 0x07, 0xc8, 0x14, 0x21, 0x5b, 0x2e, 0x0e, 0xf7, 0xa2, 0xd4, 0xd4, 0x92, 0xcc,
	0xbc, 0x74, 0x21, 0x31, 0x3d, 0x24, 0xbb, 0x10, 0xc6, 0x4a, 0x89, 0x63, 0x88, 0x43, 0x2c, 0x50,
	0x62, 0x10, 0x72, 0xe5, 0xe2, 0x0b, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xa5, 0xc0, 0x10, 0x03, 0x46,
	0x23, 0x37, 0x2e, 0xd6, 0x70, 0x90, 0x04, 0x85, 0xce, 0x49, 0x62, 0x03, 0x87, 0x90, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xae, 0x9c, 0xb5, 0x08, 0x35, 0x01, 0x00, 0x00,
}
